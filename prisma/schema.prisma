generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  password       String?   // For email/password auth
  accounts       Account[]
  sessions       Session[]
  chatSessions   ChatSession[]
  partnerSessions ChatSession[] @relation("PartnerChatSession")
  emotionalCheckins EmotionalCheckin[]
  subscription   Subscription?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ChatSession {
  id          String      @id @default(cuid())
  userId      String
  partnerId   String?     // For couple conversations, optional
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  chatHistories ChatHistory[]

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  partner     User?       @relation("PartnerChatSession", fields: [partnerId], references: [id], onDelete: Cascade)
}

model ChatHistory {
  id            String      @id @default(cuid())
  chatSessionId String
  message       String
  isUser        Boolean     // true if message from user, false if from AI
  createdAt     DateTime    @default(now())
  summary       String?     // Summarized chat history
  emotionalState String?    // e.g., triste, frustrado, esperanzado

  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
}

model EmotionalCheckin {
  id        String   @id @default(cuid())
  userId    String
  mood      String   // e.g., triste, frustrado, esperanzado
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String   @unique
  plan              String
  status            String   // active, canceled, paused, etc.
  startDate         DateTime
  endDate           DateTime?
  trialEndDate      DateTime?
  paymentMethodId   String?
  mercadoPagoCustomerId String?
  mercadoPagoSubscriptionId String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
